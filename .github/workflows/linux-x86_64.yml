name: Release extra-users (Linux x86_64)

on:
  push:
    tags:
      - "*"

jobs:
  build-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build on Alpine (musl) without staticx
        run: |
          docker run --rm -v ${PWD}:/workspace -w /workspace alpine:3.19 sh -c "
            apk add --no-cache python3 py3-pip gcc musl-dev linux-headers binutils upx &&
            python3 -m venv venv &&
            source venv/bin/activate &&
            pip install --upgrade pip &&
            pip install pyinstaller &&
            pyinstaller --onefile --strip --name extra-users extra-users.py &&
            upx --best dist/extra-users &&
            chmod 755 dist/extra-users
          "

      - name: Fix permissions and prepare artifact
        run: |
          sudo chown -R $(whoami):$(whoami) dist/ 2>/dev/null || true
          mv dist/extra-users dist/extra-users-linux-x86_64

      - name: Test binary on different distributions
        run: |
          echo "========================================="
          echo "🧪 TESTING BINARY COMPATIBILITY"
          echo "========================================="
          
          echo "📋 Binary Info:"
          fi

      - name: Build summary
        run: |
          echo ""
          echo "========================================="
          echo "✅ BUILD SUMMARY"
          echo "========================================="
          echo "🏗️  Built on: Alpine Linux 3.19 (musl)"
          echo "🐍 Python: $(docker run --rm alpine:3.19 python3 --version)"
          echo "📦 Binary: dist/extra-users-linux-x86_64"
          echo "📏 Size: $(ls -lh dist/extra-users-linux-x86_64 | awk '{print $5}')"
          echo "🔗 Type: Static binary (no external dependencies)"
          echo "🌐 Compatible: Alpine Linux, Debian, Ubuntu"
          echo "========================================="le dist/extra-users-linux-x86_64
          ls -lh dist/extra-users-linux-x86_64
          
          echo ""
          echo "🐧 Testing on Alpine Linux (musl)..."
          if docker run --rm -v ${PWD}/dist:/test alpine:3.19 /test/extra-users-linux-x86_64 --help >/dev/null 2>&1; then
            echo "✅ Alpine Linux: PASSED"
          else
            echo "❌ Alpine Linux: FAILED"
          fi
          
          echo ""
          echo "🐧 Testing on Debian 12 (glibc)..."
          if docker run --rm -v ${PWD}/dist:/test debian:12 /test/extra-users-linux-x86_64 --help >/dev/null 2>&1; then
            echo "✅ Debian 12: PASSED"
          else
            echo "❌ Debian 12: FAILED"
          fi
          
          echo ""
          echo "🐧 Testing on Ubuntu 22.04 (glibc)..."
          if docker run --rm -v ${PWD}/dist:/test ubuntu:22.04 /test/extra-users-linux-x86_64 --help >/dev/null 2>&1; then
            echo "✅ Ubuntu 22.04: PASSED"
          else
            echo "❌ Ubuntu 22.04: FAILED"
          fi

      - name: Create test config and run functional tests
        run: |
          echo ""
          echo "========================================="
          echo "🚀 FUNCTIONAL TESTING"
          echo "========================================="
          
          # Tạo test config
          cat > test-config.json << 'EOF'
          {
            "users": [
              {
                "name": "testuser",
                "group": "testgroup",
                "shell": "/bin/sh",
                "home": "/home/testuser"
              }
            ]
          }
          EOF
          
          echo "📝 Test config created:"
          cat test-config.json
          
          echo ""
          echo "🧪 Testing dry-run functionality on Alpine:"
          docker run --rm -v ${PWD}:/workspace -w /workspace alpine:3.19 /workspace/dist/extra-users-linux-x86_64 --config test-config.json --dry-run --verbose || echo "Dry-run test completed"
          
          echo ""
          echo "🧪 Testing dry-run functionality on Debian:"
          docker run --rm -v ${PWD}:/workspace -w /workspace debian:12 /workspace/dist/extra-users-linux-x86_64 --config test-config.json --dry-run --verbose || echo "Dry-run test completed"

      - name: Analyze binary dependencies
        run: |
          echo ""
          echo "========================================="
          echo "🔍 BINARY ANALYSIS"
          echo "========================================="
          
          echo "📊 File type:"
          file dist/extra-users-linux-x86_64
          
          echo ""
          echo "📏 File size:"
          ls -lh dist/extra-users-linux-x86_64 | awk '{print "Size: " $5}'
          
          echo ""
          echo "🔗 Checking dynamic dependencies:"
          if docker run --rm -v ${PWD}/dist:/test alpine:3.19 ldd /test/extra-users-linux-x86_64 2>&1 | grep -q "not a dynamic executable"; then
            echo "✅ Static binary - no external dependencies required"
          else
            echo "⚠️  Dynamic dependencies found:"
            docker run --rm -v ${PWD}/dist:/test alpine:3.19 ldd /test/extra-users-linux-x86_64 2>&1 || true
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/extra-users-linux-x86_64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}